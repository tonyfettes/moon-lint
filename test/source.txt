fn main {
  if 1 == 1 {
    println("true")
    println("true")
  }
  if 1 == 2 {
    println("false")
    println("false")
  }
  for i = 0; i < 3; i = i + 1 {
    println("i: \{i}")
  }
  for i = 0; i < 42; i = i + 1 {
    if i % 2 == 0 {
      continue i + 1
    }
    continue i - 1
  }
}

///|
/// Creates a new fixed array of specified length where each element is generated
/// lazily by calling the given function.
///
/// Parameters:
///
/// * `length` : The size of the array to create. If negative or zero, returns an
/// empty array.
/// * `generator` : A function that takes no parameters and returns a value of
/// type `T`. This function is called once for each element in the array.
///
/// Returns a new fixed array of type `T` with the specified length, where each
/// element is generated by calling the `generator` function.
///
/// Example:
///
/// ```moonbit
/// test "FixedArray::new" {
///   let mut i = 0
///   let arr = FixedArray::makei(3, fn(_) {
///     i = i + 1
///     i
///   })
///   inspect!(arr, content="[1, 2, 3]")
/// }
/// ```
///
/// @alert deprecated "Use `FixedArray::makei` instead"
#coverage.skip
pub fn FixedArray::new[T](length : Int, value : () -> T) -> FixedArray[T] {
  if length <= 0 {
    []
  } else {
    let array = FixedArray::make(length, value())
    for i in 1..<(length) {
      array[i] = value()
    }
    array
  }
}

///|
/// Creates a new fixed array of specified length where each element is generated
/// lazily by calling the given function.
///
/// Parameters:
///
/// * `length` : The size of the array to create. If negative or zero, returns an
/// empty array.
/// * `generator` : A function that takes no parameters and returns a value of
/// type `T`. This function is called once for each element in the array.
///
/// Returns a new fixed array of type `T` with the specified length, where each
/// element is generated by calling the `generator` function.
///
/// Example:
///
/// ```moonbit
/// test "FixedArray::new" {
///   let mut i = 0
///   let arr = FixedArray::makei(3, fn(_) {
///     i = i + 1
///     i
///   })
///   inspect!(arr, content="[1, 2, 3]")
/// }
/// ```
///
/// @alert deprecated "Use `FixedArray::makei` instead"
#coverage.skip
pub fn FixedArray::new[T](length : Int, value : () -> T) -> FixedArray[T] {
  if length <= 0 {
    []
  } else {
    let array = FixedArray::make(length, value())
    for i in 1..<(length) {
      array[i] = value()
    }
    array
  }
}
